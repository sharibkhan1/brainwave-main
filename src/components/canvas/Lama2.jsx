/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 lama.gltf 
*/

// import React from 'react'
// import { useGLTF } from '@react-three/drei'

// export function Model(props) {
//   const { nodes, materials } = useGLTF('/lama.gltf')
//   return (
//     <group {...props} dispose={null}>
//       <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
//         <mesh geometry={nodes.Mesh.geometry} material={materials['Material.002']} />
//         <mesh geometry={nodes.Mesh_1.geometry} material={materials['Material.001']} />
//         <mesh geometry={nodes.Mesh_2.geometry} material={materials.lambert4} />
//       </group>
//     </group>
//   )
// }

// useGLTF.preload('/lama.gltf')

import React, { useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { OrbitControls, useGLTF } from '@react-three/drei'

export function Model(props) {
  const { nodes, materials } = useGLTF('./lama2/lama.gltf') // Ensure you get materials here

  const [bounce, setBounce] = useState(0)

  useFrame(({ clock }) => {
    const time = clock.getElapsedTime()
    const bounceSpeed = 2
    const bounceHeight = 0.9
    setBounce(Math.sin(time * bounceSpeed) * bounceHeight)
  })

  return (
    <group {...props} dispose={null}>
      <mesh 
        rotation={[Math.PI / 2, 0, 0]} 
        geometry={nodes.Mesh.geometry}
        position={[0, bounce, 0]}
        material={materials['Material.002']} // Access materials from the `materials` object
      />
      <mesh 
        rotation={[Math.PI / 2, 0, 0]} 
        geometry={nodes.Mesh_1.geometry}
        position={[0, bounce, 0]}
        material={materials['Material.001']} // Access materials from the `materials` object
      />
      <mesh 
        rotation={[Math.PI / 2, 0, 0]}  
        geometry={nodes.Mesh_2.geometry}
        position={[0, bounce, 0]}
        material={materials.lambert4} // Access materials from the `materials` object
      />
    </group>
  )
}


useGLTF.preload('./lama2/lama.gltf')

const LamaCanvas = () => {
  const [isMobile, setIsMobile] = useState(false)

  React.useEffect(() => {
    const mediaQuery = window.matchMedia("(max-width: 500px)")
    setIsMobile(mediaQuery.matches)

    const handleMediaQueryChange = (event) => {
      setIsMobile(event.matches)
    }

    mediaQuery.addEventListener("change", handleMediaQueryChange)
    return () => {
      mediaQuery.removeEventListener("change", handleMediaQueryChange)
    }
  }, [])

  // Set the position based on the isMobile state
  const position = isMobile ? [0, -4.3, 0] : [0, -5.9, 0]

  return (
    <Canvas>
      <ambientLight intensity={0.5} />
      <directionalLight position={[10, 10, 5]} intensity={1} />
      <directionalLight position={[-10, -10, -5]} intensity={0.5} />
      <Model position={position} scale={isMobile ? 0.15 : 0.2} />
      <OrbitControls
        enableZoom={false}
        maxPolarAngle={Math.PI / 2}
        minPolarAngle={Math.PI / 2}
        minAzimuthAngle={-Math.PI / 20}  // Limit rotation to 45 degrees left
        maxAzimuthAngle={Math.PI / 20}   
      />
    </Canvas>
  )
}

export default LamaCanvas
